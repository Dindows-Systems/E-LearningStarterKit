<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Average" xml:space="preserve">
    <value>Promedio</value>
  </data>
  <data name="Billing" xml:space="preserve">
    <value>Facturación</value>
  </data>
  <data name="CreditCardTransCompleted" xml:space="preserve">
    <value>Transacción con tarjeta de crédito completada {0}</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Eliminado: {0}</value>
  </data>
  <data name="DiscountedPrice" xml:space="preserve">
    <value>{0} (descontado {1} )</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Hubo un error</value>
  </data>
  <data name="Excellent" xml:space="preserve">
    <value>Excelente</value>
  </data>
  <data name="Fair" xml:space="preserve">
    <value>No Tan Malo</value>
  </data>
  <data name="FeedDescription" xml:space="preserve">
    <value>Los Cursos de Latino E-Learning pueden ser agregados rápida y fácilmente a su aggregator o sitio.</value>
  </data>
  <data name="FeedTitle" xml:space="preserve">
    <value>Cursos de Latino E-Learning</value>
  </data>
  <data name="Finalize" xml:space="preserve">
    <value>Terminar</value>
  </data>
  <data name="Good" xml:space="preserve">
    <value>Bueno</value>
  </data>
  <data name="InvalidFileType" xml:space="preserve">
    <value>Tipo de archivo inválido</value>
  </data>
  <data name="InvalidOrder" xml:space="preserve">
    <value>Orden Inválida: {0}</value>
  </data>
  <data name="InvalidOrder2" xml:space="preserve">
    <value>Orden Inválida</value>
  </data>
  <data name="InvalidPayPalToken" xml:space="preserve">
    <value>Token de PayPal inválido</value>
  </data>
  <data name="InvalidPayPalTransactionID" xml:space="preserve">
    <value>ID de Transacción PayPal Inválido</value>
  </data>
  <data name="InvalidQuery" xml:space="preserve">
    <value>Consulta Inválida</value>
  </data>
  <data name="InvalidSubtotal" xml:space="preserve">
    <value>Subtotal Inválido</value>
  </data>
  <data name="InvalidTransaction" xml:space="preserve">
    <value>Transacción inválida, la transacción no se registró correctamente</value>
  </data>
  <data name="InvalidUrlProduct" xml:space="preserve">
    <value>URL/Id Producto inválido</value>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>Usuario inválido para la Orden. Por favor asigne Order.UserName correctamente.</value>
  </data>
  <data name="NeedBillingAddress" xml:space="preserve">
    <value>Se necesita una dirección de facturación</value>
  </data>
  <data name="NeedShippingAddress" xml:space="preserve">
    <value>Se necesita una dirección de envío</value>
  </data>
  <data name="NeedValidEmail" xml:space="preserve">
    <value>Se necesita un Email válido para esta orden</value>
  </data>
  <data name="NeedValidFirstName" xml:space="preserve">
    <value>Se necesita un Nombre válido para esta orden</value>
  </data>
  <data name="NeedValidIPAddress" xml:space="preserve">
    <value>Se  necesita una dirección IP válida para esta orden</value>
  </data>
  <data name="NeedValidLastName" xml:space="preserve">
    <value>Se necesita un Apellido válido para esta orden</value>
  </data>
  <data name="NoFileSelected" xml:space="preserve">
    <value>No se seleccionó ningún archivo</value>
  </data>
  <data name="NoFileToDelete" xml:space="preserve">
    <value>No hay archivo a eliminar</value>
  </data>
  <data name="Nofolder" xml:space="preserve">
    <value>No hay carpeta</value>
  </data>
  <data name="NoImages" xml:space="preserve">
    <value>No hay imágenes</value>
  </data>
  <data name="NoItems" xml:space="preserve">
    <value>No se han agregado items a la orden</value>
  </data>
  <data name="NoResults" xml:space="preserve">
    <value>No Hay Resultados</value>
  </data>
  <data name="NoTransactionID" xml:space="preserve">
    <value>No hay ID de Transacción - Inválido</value>
  </data>
  <data name="NotRated" xml:space="preserve">
    <value>Sin calificar</value>
  </data>
  <data name="NotValidTrackedItem" xml:space="preserve">
    <value>Not a valid TrackedItem</value>
  </data>
  <data name="OrderCancelled" xml:space="preserve">
    <value>Orden Cancelada por {0}: " {1}</value>
  </data>
  <data name="OrderCreated" xml:space="preserve">
    <value>Orden Creada</value>
  </data>
  <data name="OrderRefunded" xml:space="preserve">
    <value>Orden Reembolsada</value>
  </data>
  <data name="OrderRefundedOn" xml:space="preserve">
    <value>Orden Reembolsada el {0}</value>
  </data>
  <data name="OrderSystem" xml:space="preserve">
    <value>Sistema de Ordenes</value>
  </data>
  <data name="OurStore" xml:space="preserve">
    <value>Nuestra Tienda</value>
  </data>
  <data name="PaidAtPayPal" xml:space="preserve">
    <value>Pagado en PayPal</value>
  </data>
  <data name="PayPalAmountDontMatchOrder" xml:space="preserve">
    <value>El monto retornado de PayPal no concuerda con el de la orden</value>
  </data>
  <data name="PayPalExpressCheckoutError" xml:space="preserve">
    <value>Error de Express Checkout de PayPal: {0}</value>
  </data>
  <data name="PayPalExpressCheckoutTransCompleted" xml:space="preserve">
    <value>Transacción con Express Checkout de PayPal completada {0}</value>
  </data>
  <data name="PayPalPaymendReceived" xml:space="preserve">
    <value>Pago de PayPal recibido y aplicado</value>
  </data>
  <data name="PayPalStandardPaymentReceivedOn" xml:space="preserve">
    <value>Pago de PayPal Standard Recibido el {0}: ID= {1}</value>
  </data>
  <data name="PDTFailure" xml:space="preserve">
    <value>Falla de PDT: {0}</value>
  </data>
  <data name="PlaceHolder" xml:space="preserve">
    <value>este es un espacio libre</value>
  </data>
  <data name="Poor" xml:space="preserve">
    <value>Pobre</value>
  </data>
  <data name="RatedDescription" xml:space="preserve">
    <value>Calificado {0} [{1} de 5 / calificado {2} vez(veces)]</value>
  </data>
  <data name="ReviewNotSaved" xml:space="preserve">
    <value>Ups! Hubo un error y su comentario no pudo ser guardado: {0}</value>
  </data>
  <data name="ReviewSaved" xml:space="preserve">
    <value>Comentario Guardado</value>
  </data>
  <data name="SearchResults" xml:space="preserve">
    <value>Resultados de la Búsqueda: '{0}'</value>
  </data>
  <data name="Shipping" xml:space="preserve">
    <value>Envío</value>
  </data>
  <data name="Slogan" xml:space="preserve">
    <value>Latino E-Learning: Aprende A Tu Propio Ritmo</value>
  </data>
  <data name="Stars" xml:space="preserve">
    <value>Estrellas</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Exito</value>
  </data>
  <data name="SuccessfullyTransacted" xml:space="preserve">
    <value>La transacción para la orden {0} se realizó con éxito</value>
  </data>
  <data name="Terrible" xml:space="preserve">
    <value>Terrible</value>
  </data>
  <data name="ThankYou" xml:space="preserve">
    <value>Gracias</value>
  </data>
  <data name="Up" xml:space="preserve">
    <value>Arriba</value>
  </data>
  <data name="UploadedSucess" xml:space="preserve">
    <value>Cargado con Exito</value>
  </data>
  <data name="YouRated" xml:space="preserve">
    <value>Usted calificó este curso {0} de {1}</value>
  </data>
</root>