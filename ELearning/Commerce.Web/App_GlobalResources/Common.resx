<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Average" xml:space="preserve">
    <value>Average</value>
  </data>
  <data name="Billing" xml:space="preserve">
    <value>Billing</value>
  </data>
  <data name="CreditCardTransCompleted" xml:space="preserve">
    <value>Credit card transaction completed {0}</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted: {0}</value>
  </data>
  <data name="DiscountedPrice" xml:space="preserve">
    <value>{0} (discounted {1} )</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>There was an error</value>
  </data>
  <data name="Excellent" xml:space="preserve">
    <value>Excellent</value>
  </data>
  <data name="Fair" xml:space="preserve">
    <value>Fair</value>
  </data>
  <data name="FeedDescription" xml:space="preserve">
    <value>Commerce Starter Kit 2.0 Products that can be added quickly and easily to your aggregator or site.</value>
  </data>
  <data name="FeedTitle" xml:space="preserve">
    <value>Commerce Starter Kit 2.0 Products</value>
  </data>
  <data name="Finalize" xml:space="preserve">
    <value>Finalize</value>
  </data>
  <data name="Good" xml:space="preserve">
    <value>Good</value>
  </data>
  <data name="InvalidFileType" xml:space="preserve">
    <value>Invalid file type</value>
  </data>
  <data name="InvalidOrder" xml:space="preserve">
    <value>Invalid Order: {0}</value>
  </data>
  <data name="InvalidOrder2" xml:space="preserve">
    <value>Invalid Order</value>
  </data>
  <data name="InvalidPayPalToken" xml:space="preserve">
    <value>Invalid PayPal Token</value>
  </data>
  <data name="InvalidPayPalTransactionID" xml:space="preserve">
    <value>Invalid PayPal TransactionID</value>
  </data>
  <data name="InvalidQuery" xml:space="preserve">
    <value>Invalid Query</value>
  </data>
  <data name="InvalidSubtotal" xml:space="preserve">
    <value>Invalid Subtotal</value>
  </data>
  <data name="InvalidTransaction" xml:space="preserve">
    <value>Invalid transaction, the transaction did not record properly</value>
  </data>
  <data name="InvalidUrlProduct" xml:space="preserve">
    <value>Invalid url/product id</value>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>Invalid User Name for the Order. Please set Order.UserName accordingly.</value>
  </data>
  <data name="NeedBillingAddress" xml:space="preserve">
    <value>Need a billing address</value>
  </data>
  <data name="NeedShippingAddress" xml:space="preserve">
    <value>Need a shipping address</value>
  </data>
  <data name="NeedValidEmail" xml:space="preserve">
    <value>Need a valid Email for this order</value>
  </data>
  <data name="NeedValidFirstName" xml:space="preserve">
    <value>Need a valid First Name for this order</value>
  </data>
  <data name="NeedValidIPAddress" xml:space="preserve">
    <value>Need a valid IP address for this order</value>
  </data>
  <data name="NeedValidLastName" xml:space="preserve">
    <value>Need a valid Last Name for this order</value>
  </data>
  <data name="NoFileSelected" xml:space="preserve">
    <value>No file selected</value>
  </data>
  <data name="NoFileToDelete" xml:space="preserve">
    <value>No file to delete</value>
  </data>
  <data name="Nofolder" xml:space="preserve">
    <value>No folder</value>
  </data>
  <data name="NoImages" xml:space="preserve">
    <value>No Images</value>
  </data>
  <data name="NoItems" xml:space="preserve">
    <value>No items have been added to the order</value>
  </data>
  <data name="NoResults" xml:space="preserve">
    <value>No Results</value>
  </data>
  <data name="NoTransactionID" xml:space="preserve">
    <value>No TransactionID - Invalid</value>
  </data>
  <data name="NotRated" xml:space="preserve">
    <value>Not rated</value>
  </data>
  <data name="NotValidTrackedItem" xml:space="preserve">
    <value>Not a valid TrackedItem</value>
  </data>
  <data name="OrderCancelled" xml:space="preserve">
    <value>Order Cancelled by {0}: " {1}</value>
  </data>
  <data name="OrderCreated" xml:space="preserve">
    <value>Order Created</value>
  </data>
  <data name="OrderRefunded" xml:space="preserve">
    <value>Order Refunded</value>
  </data>
  <data name="OrderRefundedOn" xml:space="preserve">
    <value>Order Refunded on {0}</value>
  </data>
  <data name="OrderSystem" xml:space="preserve">
    <value>Order System</value>
  </data>
  <data name="OurStore" xml:space="preserve">
    <value>Our Store</value>
  </data>
  <data name="PaidAtPayPal" xml:space="preserve">
    <value>Paid for at PayPal</value>
  </data>
  <data name="PayPalAmountDontMatchOrder" xml:space="preserve">
    <value>The amount returned from PayPal does match that of the order</value>
  </data>
  <data name="PayPalExpressCheckoutError" xml:space="preserve">
    <value>PayPal ExpressCheckout Error: {0}</value>
  </data>
  <data name="PayPalExpressCheckoutTransCompleted" xml:space="preserve">
    <value>PayPal ExpressCheckout transaction completed {0}</value>
  </data>
  <data name="PayPalPaymendReceived" xml:space="preserve">
    <value>PayPal payment received and applied</value>
  </data>
  <data name="PayPalStandardPaymentReceivedOn" xml:space="preserve">
    <value>PayPal Standard Payment Received on {0}: ID= {1}</value>
  </data>
  <data name="PDTFailure" xml:space="preserve">
    <value>PDT Failure: {0}</value>
  </data>
  <data name="PlaceHolder" xml:space="preserve">
    <value>this is a placeholder</value>
  </data>
  <data name="Poor" xml:space="preserve">
    <value>Poor</value>
  </data>
  <data name="RatedDescription" xml:space="preserve">
    <value>Rated {0} [{1} out of 5 / rated {2} time(s)]</value>
  </data>
  <data name="ReviewNotSaved" xml:space="preserve">
    <value>Oops! There was an error and your review was not saved: {0}</value>
  </data>
  <data name="ReviewSaved" xml:space="preserve">
    <value>Review Saved</value>
  </data>
  <data name="SearchResults" xml:space="preserve">
    <value>Search Results: '{0}'</value>
  </data>
  <data name="Shipping" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="Slogan" xml:space="preserve">
    <value>The Commerce Starter Kit: Sell Your Bits, Not Your Soul</value>
  </data>
  <data name="Stars" xml:space="preserve">
    <value>Stars</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="SuccessfullyTransacted" xml:space="preserve">
    <value>Transaction for order {0} successfully transacted</value>
  </data>
  <data name="Terrible" xml:space="preserve">
    <value>Terrible</value>
  </data>
  <data name="ThankYou" xml:space="preserve">
    <value>Thank you</value>
  </data>
  <data name="Up" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="UploadedSucess" xml:space="preserve">
    <value>Uploaded Sucess</value>
  </data>
  <data name="YouRated" xml:space="preserve">
    <value>You rated this {0} out of {1}</value>
  </data>
</root>